# This file is autogenerated by `applaudgen` from `app_store_connect_api.json`.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!

from deprecated import deprecated
from typing import Union, Optional, Literal
from .enums import *
from .models import *
from .requests import *
from pydantic import Field

class AgeRatingDeclarationResponse(ApplaudModel):
    data: AgeRatingDeclaration
    links: DocumentLinks

class AppCategoriesResponse(ApplaudModel):
    data: list[AppCategory]
    links: PagedDocumentLinks
    included: Optional[list[Union[AppCategory, AppCategory]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppCategoryResponse(ApplaudModel):
    data: AppCategory
    links: DocumentLinks
    included: Optional[list[Union[AppCategory, AppCategory]]] = Field(discriminator='type')

class AppClipAdvancedExperienceImageResponse(ApplaudModel):
    data: AppClipAdvancedExperienceImage
    links: DocumentLinks

class AppClipAdvancedExperiencesResponse(ApplaudModel):
    data: list[AppClipAdvancedExperience]
    links: PagedDocumentLinks
    included: Optional[list[Union[AppClip, AppClipAdvancedExperienceImage, AppClipAdvancedExperienceLocalization]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppClipAdvancedExperienceResponse(ApplaudModel):
    data: AppClipAdvancedExperience
    links: DocumentLinks
    included: Optional[list[Union[AppClip, AppClipAdvancedExperienceImage, AppClipAdvancedExperienceLocalization]]] = Field(discriminator='type')

class AppClipAppStoreReviewDetailResponse(ApplaudModel):
    data: AppClipAppStoreReviewDetail
    links: DocumentLinks
    included: Optional[list[AppClipDefaultExperience]]

class AppClipDefaultExperienceLocalizationsResponse(ApplaudModel):
    data: list[AppClipDefaultExperienceLocalization]
    links: PagedDocumentLinks
    included: Optional[list[Union[AppClipDefaultExperience, AppClipHeaderImage]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppClipDefaultExperienceLocalizationResponse(ApplaudModel):
    data: AppClipDefaultExperienceLocalization
    links: DocumentLinks
    included: Optional[list[Union[AppClipDefaultExperience, AppClipHeaderImage]]] = Field(discriminator='type')

class AppClipDefaultExperiencesResponse(ApplaudModel):
    data: list[AppClipDefaultExperience]
    links: PagedDocumentLinks
    included: Optional[list[Union[AppClip, AppStoreVersion, AppClipDefaultExperienceLocalization, AppClipAppStoreReviewDetail]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppClipDefaultExperienceResponse(ApplaudModel):
    data: AppClipDefaultExperience
    links: DocumentLinks
    included: Optional[list[Union[AppClip, AppStoreVersion, AppClipDefaultExperienceLocalization, AppClipAppStoreReviewDetail]]] = Field(discriminator='type')

class AppClipDomainStatusResponse(ApplaudModel):
    data: AppClipDomainStatus
    links: DocumentLinks

class AppClipHeaderImageResponse(ApplaudModel):
    data: AppClipHeaderImage
    links: DocumentLinks
    included: Optional[list[AppClipDefaultExperienceLocalization]]

class AppClipsResponse(ApplaudModel):
    data: list[AppClip]
    links: PagedDocumentLinks
    included: Optional[list[Union[App, AppClipDefaultExperience]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppClipResponse(ApplaudModel):
    data: AppClip
    links: DocumentLinks
    included: Optional[list[Union[App, AppClipDefaultExperience]]] = Field(discriminator='type')

class AppEncryptionDeclarationsResponse(ApplaudModel):
    data: list[AppEncryptionDeclaration]
    links: PagedDocumentLinks
    included: Optional[list[App]]
    meta: Optional[PagingInformation]

class AppEncryptionDeclarationResponse(ApplaudModel):
    data: AppEncryptionDeclaration
    links: DocumentLinks
    included: Optional[list[App]]

class AppInfoLocalizationsResponse(ApplaudModel):
    data: list[AppInfoLocalization]
    links: PagedDocumentLinks
    included: Optional[list[AppInfo]]
    meta: Optional[PagingInformation]

class AppInfoLocalizationResponse(ApplaudModel):
    data: AppInfoLocalization
    links: DocumentLinks
    included: Optional[list[AppInfo]]

class AppInfosResponse(ApplaudModel):
    data: list[AppInfo]
    links: PagedDocumentLinks
    included: Optional[list[Union[App, AgeRatingDeclaration, AppInfoLocalization, AppCategory, AppCategory, AppCategory, AppCategory, AppCategory, AppCategory]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppInfoResponse(ApplaudModel):
    data: AppInfo
    links: DocumentLinks
    included: Optional[list[Union[App, AgeRatingDeclaration, AppInfoLocalization, AppCategory, AppCategory, AppCategory, AppCategory, AppCategory, AppCategory]]] = Field(discriminator='type')

class AppPreOrderResponse(ApplaudModel):
    data: AppPreOrder
    links: DocumentLinks
    included: Optional[list[App]]

class AppPreviewSetsResponse(ApplaudModel):
    data: list[AppPreviewSet]
    links: PagedDocumentLinks
    included: Optional[list[Union[AppStoreVersionLocalization, AppPreview]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppPreviewSetResponse(ApplaudModel):
    data: AppPreviewSet
    links: DocumentLinks
    included: Optional[list[Union[AppStoreVersionLocalization, AppPreview]]] = Field(discriminator='type')

class AppPreviewsResponse(ApplaudModel):
    data: list[AppPreview]
    links: PagedDocumentLinks
    included: Optional[list[AppPreviewSet]]
    meta: Optional[PagingInformation]

class AppPreviewResponse(ApplaudModel):
    data: AppPreview
    links: DocumentLinks
    included: Optional[list[AppPreviewSet]]

class AppPricePointsResponse(ApplaudModel):
    data: list[AppPricePoint]
    links: PagedDocumentLinks
    included: Optional[list[Union[AppPriceTier, Territory]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppPricePointResponse(ApplaudModel):
    data: AppPricePoint
    links: DocumentLinks
    included: Optional[list[Union[AppPriceTier, Territory]]] = Field(discriminator='type')

class AppPriceTiersResponse(ApplaudModel):
    data: list[AppPriceTier]
    links: PagedDocumentLinks
    included: Optional[list[AppPricePoint]]
    meta: Optional[PagingInformation]

class AppPriceTierResponse(ApplaudModel):
    data: AppPriceTier
    links: DocumentLinks
    included: Optional[list[AppPricePoint]]

class AppPricesResponse(ApplaudModel):
    data: list[AppPrice]
    links: PagedDocumentLinks
    included: Optional[list[Union[App, AppPriceTier]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppPriceResponse(ApplaudModel):
    data: AppPrice
    links: DocumentLinks
    included: Optional[list[Union[App, AppPriceTier]]] = Field(discriminator='type')

class AppScreenshotSetsResponse(ApplaudModel):
    data: list[AppScreenshotSet]
    links: PagedDocumentLinks
    included: Optional[list[Union[AppStoreVersionLocalization, AppScreenshot]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppScreenshotSetResponse(ApplaudModel):
    data: AppScreenshotSet
    links: DocumentLinks
    included: Optional[list[Union[AppStoreVersionLocalization, AppScreenshot]]] = Field(discriminator='type')

class AppScreenshotsResponse(ApplaudModel):
    data: list[AppScreenshot]
    links: PagedDocumentLinks
    included: Optional[list[AppScreenshotSet]]
    meta: Optional[PagingInformation]

class AppScreenshotResponse(ApplaudModel):
    data: AppScreenshot
    links: DocumentLinks
    included: Optional[list[AppScreenshotSet]]

class AppStoreReviewAttachmentsResponse(ApplaudModel):
    data: list[AppStoreReviewAttachment]
    links: PagedDocumentLinks
    included: Optional[list[AppStoreReviewDetail]]
    meta: Optional[PagingInformation]

class AppStoreReviewAttachmentResponse(ApplaudModel):
    data: AppStoreReviewAttachment
    links: DocumentLinks
    included: Optional[list[AppStoreReviewDetail]]

class AppStoreReviewDetailResponse(ApplaudModel):
    data: AppStoreReviewDetail
    links: DocumentLinks
    included: Optional[list[Union[AppStoreVersion, AppStoreReviewAttachment]]] = Field(discriminator='type')

class AppStoreVersionLocalizationsResponse(ApplaudModel):
    data: list[AppStoreVersionLocalization]
    links: PagedDocumentLinks
    included: Optional[list[Union[AppStoreVersion, AppScreenshotSet, AppPreviewSet]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppStoreVersionLocalizationResponse(ApplaudModel):
    data: AppStoreVersionLocalization
    links: DocumentLinks
    included: Optional[list[Union[AppStoreVersion, AppScreenshotSet, AppPreviewSet]]] = Field(discriminator='type')

class AppStoreVersionPhasedReleaseResponse(ApplaudModel):
    data: AppStoreVersionPhasedRelease
    links: DocumentLinks

class AppStoreVersionReleaseRequestResponse(ApplaudModel):
    data: AppStoreVersionReleaseRequest
    links: DocumentLinks

class AppStoreVersionSubmissionResponse(ApplaudModel):
    data: AppStoreVersionSubmission
    links: DocumentLinks
    included: Optional[list[AppStoreVersion]]

class AppStoreVersionsResponse(ApplaudModel):
    data: list[AppStoreVersion]
    links: PagedDocumentLinks
    included: Optional[list[Union[App, AgeRatingDeclaration, AppStoreVersionLocalization, Build, AppStoreVersionPhasedRelease, RoutingAppCoverage, AppStoreReviewDetail, AppStoreVersionSubmission, IdfaDeclaration, AppClipDefaultExperience]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppStoreVersionResponse(ApplaudModel):
    data: AppStoreVersion
    links: DocumentLinks
    included: Optional[list[Union[App, AgeRatingDeclaration, AppStoreVersionLocalization, Build, AppStoreVersionPhasedRelease, RoutingAppCoverage, AppStoreReviewDetail, AppStoreVersionSubmission, IdfaDeclaration, AppClipDefaultExperience]]] = Field(discriminator='type')

class AppsResponse(ApplaudModel):
    data: list[App]
    links: PagedDocumentLinks
    included: Optional[list[Union[CiProduct, BetaGroup, AppStoreVersion, PrereleaseVersion, BetaAppLocalization, Build, BetaLicenseAgreement, BetaAppReviewDetail, AppInfo, AppClip, EndUserLicenseAgreement, AppPreOrder, AppPrice, Territory, InAppPurchase, GameCenterEnabledVersion]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class AppResponse(ApplaudModel):
    data: App
    links: DocumentLinks
    included: Optional[list[Union[CiProduct, BetaGroup, AppStoreVersion, PrereleaseVersion, BetaAppLocalization, Build, BetaLicenseAgreement, BetaAppReviewDetail, AppInfo, AppClip, EndUserLicenseAgreement, AppPreOrder, AppPrice, Territory, InAppPurchase, GameCenterEnabledVersion]]] = Field(discriminator='type')

class BetaAppClipInvocationLocalizationResponse(ApplaudModel):
    data: BetaAppClipInvocationLocalization
    links: DocumentLinks

class BetaAppClipInvocationsResponse(ApplaudModel):
    data: list[BetaAppClipInvocation]
    links: PagedDocumentLinks
    included: Optional[list[BetaAppClipInvocationLocalization]]
    meta: Optional[PagingInformation]

class BetaAppClipInvocationResponse(ApplaudModel):
    data: BetaAppClipInvocation
    links: DocumentLinks
    included: Optional[list[BetaAppClipInvocationLocalization]]

class BetaAppLocalizationsResponse(ApplaudModel):
    data: list[BetaAppLocalization]
    links: PagedDocumentLinks
    included: Optional[list[App]]
    meta: Optional[PagingInformation]

class BetaAppLocalizationResponse(ApplaudModel):
    data: BetaAppLocalization
    links: DocumentLinks
    included: Optional[list[App]]

class BetaAppReviewDetailsResponse(ApplaudModel):
    data: list[BetaAppReviewDetail]
    links: PagedDocumentLinks
    included: Optional[list[App]]
    meta: Optional[PagingInformation]

class BetaAppReviewDetailResponse(ApplaudModel):
    data: BetaAppReviewDetail
    links: DocumentLinks
    included: Optional[list[App]]

class BetaAppReviewSubmissionsResponse(ApplaudModel):
    data: list[BetaAppReviewSubmission]
    links: PagedDocumentLinks
    included: Optional[list[Build]]
    meta: Optional[PagingInformation]

class BetaAppReviewSubmissionResponse(ApplaudModel):
    data: BetaAppReviewSubmission
    links: DocumentLinks
    included: Optional[list[Build]]

class BetaBuildLocalizationsResponse(ApplaudModel):
    data: list[BetaBuildLocalization]
    links: PagedDocumentLinks
    included: Optional[list[Build]]
    meta: Optional[PagingInformation]

class BetaBuildLocalizationResponse(ApplaudModel):
    data: BetaBuildLocalization
    links: DocumentLinks
    included: Optional[list[Build]]

class BetaGroupsResponse(ApplaudModel):
    data: list[BetaGroup]
    links: PagedDocumentLinks
    included: Optional[list[Union[App, Build, BetaTester]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class BetaGroupResponse(ApplaudModel):
    data: BetaGroup
    links: DocumentLinks
    included: Optional[list[Union[App, Build, BetaTester]]] = Field(discriminator='type')

class BetaLicenseAgreementsResponse(ApplaudModel):
    data: list[BetaLicenseAgreement]
    links: PagedDocumentLinks
    included: Optional[list[App]]
    meta: Optional[PagingInformation]

class BetaLicenseAgreementResponse(ApplaudModel):
    data: BetaLicenseAgreement
    links: DocumentLinks
    included: Optional[list[App]]

class BetaTesterInvitationResponse(ApplaudModel):
    data: BetaTesterInvitation
    links: DocumentLinks

class BetaTestersResponse(ApplaudModel):
    data: list[BetaTester]
    links: PagedDocumentLinks
    included: Optional[list[Union[App, BetaGroup, Build]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class BetaTesterResponse(ApplaudModel):
    data: BetaTester
    links: DocumentLinks
    included: Optional[list[Union[App, BetaGroup, Build]]] = Field(discriminator='type')

class BuildBetaDetailsResponse(ApplaudModel):
    data: list[BuildBetaDetail]
    links: PagedDocumentLinks
    included: Optional[list[Build]]
    meta: Optional[PagingInformation]

class BuildBetaDetailResponse(ApplaudModel):
    data: BuildBetaDetail
    links: DocumentLinks
    included: Optional[list[Build]]

class BuildBetaNotificationResponse(ApplaudModel):
    data: BuildBetaNotification
    links: DocumentLinks

class BuildBundleFileSizesResponse(ApplaudModel):
    data: list[BuildBundleFileSize]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class BuildIconsResponse(ApplaudModel):
    data: list[BuildIcon]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class BuildsResponse(ApplaudModel):
    data: list[Build]
    links: PagedDocumentLinks
    included: Optional[list[Union[PrereleaseVersion, BetaTester, BetaBuildLocalization, AppEncryptionDeclaration, BetaAppReviewSubmission, App, BuildBetaDetail, AppStoreVersion, BuildIcon, BuildBundle]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class BuildResponse(ApplaudModel):
    data: Build
    links: DocumentLinks
    included: Optional[list[Union[PrereleaseVersion, BetaTester, BetaBuildLocalization, AppEncryptionDeclaration, BetaAppReviewSubmission, App, BuildBetaDetail, AppStoreVersion, BuildIcon, BuildBundle]]] = Field(discriminator='type')

class BundleIdCapabilitiesResponse(ApplaudModel):
    data: list[BundleIdCapability]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class BundleIdCapabilityResponse(ApplaudModel):
    data: BundleIdCapability
    links: DocumentLinks

class BundleIdsResponse(ApplaudModel):
    data: list[BundleId]
    links: PagedDocumentLinks
    included: Optional[list[Union[Profile, BundleIdCapability, App]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class BundleIdResponse(ApplaudModel):
    data: BundleId
    links: DocumentLinks
    included: Optional[list[Union[Profile, BundleIdCapability, App]]] = Field(discriminator='type')

class CertificatesResponse(ApplaudModel):
    data: list[Certificate]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class CertificateResponse(ApplaudModel):
    data: Certificate
    links: DocumentLinks

class CiArtifactsResponse(ApplaudModel):
    data: list[CiArtifact]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class CiArtifactResponse(ApplaudModel):
    data: CiArtifact
    links: DocumentLinks

class CiBuildActionsResponse(ApplaudModel):
    data: list[CiBuildAction]
    links: PagedDocumentLinks
    included: Optional[list[CiBuildRun]]
    meta: Optional[PagingInformation]

class CiBuildActionResponse(ApplaudModel):
    data: CiBuildAction
    links: DocumentLinks
    included: Optional[list[CiBuildRun]]

class CiBuildRunsResponse(ApplaudModel):
    data: list[CiBuildRun]
    links: PagedDocumentLinks
    included: Optional[list[Union[Build, CiWorkflow, CiProduct, ScmGitReference, ScmGitReference, ScmPullRequest]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class CiBuildRunResponse(ApplaudModel):
    data: CiBuildRun
    links: DocumentLinks
    included: Optional[list[Union[Build, CiWorkflow, CiProduct, ScmGitReference, ScmGitReference, ScmPullRequest]]] = Field(discriminator='type')

class CiIssuesResponse(ApplaudModel):
    data: list[CiIssue]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class CiIssueResponse(ApplaudModel):
    data: CiIssue
    links: DocumentLinks

class CiMacOsVersionsResponse(ApplaudModel):
    data: list[CiMacOsVersion]
    links: PagedDocumentLinks
    included: Optional[list[CiXcodeVersion]]
    meta: Optional[PagingInformation]

class CiMacOsVersionResponse(ApplaudModel):
    data: CiMacOsVersion
    links: DocumentLinks
    included: Optional[list[CiXcodeVersion]]

class CiProductsResponse(ApplaudModel):
    data: list[CiProduct]
    links: PagedDocumentLinks
    included: Optional[list[Union[App, BundleId, ScmRepository]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class CiProductResponse(ApplaudModel):
    data: CiProduct
    links: DocumentLinks
    included: Optional[list[Union[App, BundleId, ScmRepository]]] = Field(discriminator='type')

class CiTestResultsResponse(ApplaudModel):
    data: list[CiTestResult]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class CiTestResultResponse(ApplaudModel):
    data: CiTestResult
    links: DocumentLinks

class CiWorkflowsResponse(ApplaudModel):
    data: list[CiWorkflow]
    links: PagedDocumentLinks
    included: Optional[list[Union[CiProduct, ScmRepository, CiXcodeVersion, CiMacOsVersion]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class CiWorkflowResponse(ApplaudModel):
    data: CiWorkflow
    links: DocumentLinks
    included: Optional[list[Union[CiProduct, ScmRepository, CiXcodeVersion, CiMacOsVersion]]] = Field(discriminator='type')

class CiXcodeVersionsResponse(ApplaudModel):
    data: list[CiXcodeVersion]
    links: PagedDocumentLinks
    included: Optional[list[CiMacOsVersion]]
    meta: Optional[PagingInformation]

class CiXcodeVersionResponse(ApplaudModel):
    data: CiXcodeVersion
    links: DocumentLinks
    included: Optional[list[CiMacOsVersion]]

class DevicesResponse(ApplaudModel):
    data: list[Device]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class DeviceResponse(ApplaudModel):
    data: Device
    links: DocumentLinks

class DiagnosticLogsResponse(ApplaudModel):
    data: list[DiagnosticLog]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class DiagnosticSignaturesResponse(ApplaudModel):
    data: list[DiagnosticSignature]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class EndUserLicenseAgreementResponse(ApplaudModel):
    data: EndUserLicenseAgreement
    links: DocumentLinks
    included: Optional[list[Union[App, Territory]]] = Field(discriminator='type')

class GameCenterEnabledVersionsResponse(ApplaudModel):
    data: list[GameCenterEnabledVersion]
    links: PagedDocumentLinks
    included: Optional[list[Union[GameCenterEnabledVersion, App]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

@deprecated
class IdfaDeclarationResponse(ApplaudModel):
    data: IdfaDeclaration
    links: DocumentLinks
    included: Optional[list[AppStoreVersion]]

class InAppPurchasesResponse(ApplaudModel):
    data: list[InAppPurchase]
    links: PagedDocumentLinks
    included: Optional[list[App]]
    meta: Optional[PagingInformation]

class InAppPurchaseResponse(ApplaudModel):
    data: InAppPurchase
    links: DocumentLinks
    included: Optional[list[App]]

class PerfPowerMetricsResponse(ApplaudModel):
    data: list[PerfPowerMetric]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class PreReleaseVersionsResponse(ApplaudModel):
    data: list[PrereleaseVersion]
    links: PagedDocumentLinks
    included: Optional[list[Union[Build, App]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class PrereleaseVersionResponse(ApplaudModel):
    data: PrereleaseVersion
    links: DocumentLinks
    included: Optional[list[Union[Build, App]]] = Field(discriminator='type')

class ProfilesResponse(ApplaudModel):
    data: list[Profile]
    links: PagedDocumentLinks
    included: Optional[list[Union[BundleId, Device, Certificate]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class ProfileResponse(ApplaudModel):
    data: Profile
    links: DocumentLinks
    included: Optional[list[Union[BundleId, Device, Certificate]]] = Field(discriminator='type')

class RoutingAppCoverageResponse(ApplaudModel):
    data: RoutingAppCoverage
    links: DocumentLinks
    included: Optional[list[AppStoreVersion]]

class ScmGitReferencesResponse(ApplaudModel):
    data: list[ScmGitReference]
    links: PagedDocumentLinks
    included: Optional[list[ScmRepository]]
    meta: Optional[PagingInformation]

class ScmGitReferenceResponse(ApplaudModel):
    data: ScmGitReference
    links: DocumentLinks
    included: Optional[list[ScmRepository]]

class ScmProvidersResponse(ApplaudModel):
    data: list[ScmProvider]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class ScmProviderResponse(ApplaudModel):
    data: ScmProvider
    links: DocumentLinks

class ScmPullRequestsResponse(ApplaudModel):
    data: list[ScmPullRequest]
    links: PagedDocumentLinks
    included: Optional[list[ScmRepository]]
    meta: Optional[PagingInformation]

class ScmPullRequestResponse(ApplaudModel):
    data: ScmPullRequest
    links: DocumentLinks
    included: Optional[list[ScmRepository]]

class ScmRepositoriesResponse(ApplaudModel):
    data: list[ScmRepository]
    links: PagedDocumentLinks
    included: Optional[list[Union[ScmProvider, ScmGitReference]]] = Field(discriminator='type')
    meta: Optional[PagingInformation]

class ScmRepositoryResponse(ApplaudModel):
    data: ScmRepository
    links: DocumentLinks
    included: Optional[list[Union[ScmProvider, ScmGitReference]]] = Field(discriminator='type')

class TerritoriesResponse(ApplaudModel):
    data: list[Territory]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class TerritoryResponse(ApplaudModel):
    data: Territory
    links: DocumentLinks

class UserInvitationsResponse(ApplaudModel):
    data: list[UserInvitation]
    links: PagedDocumentLinks
    included: Optional[list[App]]
    meta: Optional[PagingInformation]

class UserInvitationResponse(ApplaudModel):
    data: UserInvitation
    links: DocumentLinks
    included: Optional[list[App]]

class UsersResponse(ApplaudModel):
    data: list[User]
    links: PagedDocumentLinks
    included: Optional[list[App]]
    meta: Optional[PagingInformation]

class UserResponse(ApplaudModel):
    data: User
    links: DocumentLinks
    included: Optional[list[App]]

class AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["appStoreVersions"] = "appStoreVersions"

    data: Data
    links: DocumentLinks

class AppPreviewSetAppPreviewsLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["appPreviews"] = "appPreviews"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class AppScreenshotSetAppScreenshotsLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["appScreenshots"] = "appScreenshots"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class AppStoreVersionAppClipDefaultExperienceLinkageResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["appClipDefaultExperiences"] = "appClipDefaultExperiences"

    data: Data
    links: DocumentLinks

class AppStoreVersionBuildLinkageResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["builds"] = "builds"

    data: Data
    links: DocumentLinks

class BetaGroupBetaTestersLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["betaTesters"] = "betaTesters"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class BetaGroupBuildsLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["builds"] = "builds"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class BetaTesterAppsLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["apps"] = "apps"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class BetaTesterBetaGroupsLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["betaGroups"] = "betaGroups"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class BetaTesterBuildsLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["builds"] = "builds"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class BuildAppEncryptionDeclarationLinkageResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["appEncryptionDeclarations"] = "appEncryptionDeclarations"

    data: Data
    links: DocumentLinks

class BuildIndividualTestersLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["betaTesters"] = "betaTesters"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class GameCenterEnabledVersionCompatibleVersionsLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["gameCenterEnabledVersions"] = "gameCenterEnabledVersions"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class UserVisibleAppsLinkagesResponse(ApplaudModel):
    class Data(ApplaudModel):
        id: str
        type: Literal["apps"] = "apps"

    data: list[Data]
    links: PagedDocumentLinks
    meta: Optional[PagingInformation]

class ErrorResponse(ApplaudModel):
    class Error(ApplaudModel):
        code: str
        detail: str
        title: str
        status: str
        id: Optional[str]
        source: Optional[Union[ErrorSourcePointer, ErrorSourceParameter]]

    errors: Optional[list[Error]]


